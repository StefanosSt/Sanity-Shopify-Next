/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/filesize";
exports.ids = ["vendor-chunks/filesize"];
exports.modules = {

/***/ "(ssr)/./node_modules/filesize/lib/filesize.js":
/*!***********************************************!*\
  !*** ./node_modules/filesize/lib/filesize.js ***!
  \***********************************************/
/***/ (function(module) {

eval("/**\n * filesize\n *\n * @copyright 2022 Jason Mulligan <jason.mulligan@avoidwork.com>\n * @license BSD-3-Clause\n * @version 9.0.11\n */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n})(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n\n  var ARRAY = \"array\";\n  var BIT = \"bit\";\n  var BITS = \"bits\";\n  var BYTE = \"byte\";\n  var BYTES = \"bytes\";\n  var EMPTY = \"\";\n  var EXPONENT = \"exponent\";\n  var FUNCTION = \"function\";\n  var IEC = \"iec\";\n  var INVALID_NUMBER = \"Invalid number\";\n  var INVALID_ROUND = \"Invalid rounding method\";\n  var JEDEC = \"jedec\";\n  var OBJECT = \"object\";\n  var PERIOD = \".\";\n  var ROUND = \"round\";\n  var S = \"s\";\n  var SI_KBIT = \"kbit\";\n  var SI_KBYTE = \"kB\";\n  var SPACE = \" \";\n  var STRING = \"string\";\n  var ZERO = \"0\";\n\n  var strings = {\n    symbol: {\n      iec: {\n        bits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\n        bytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n      },\n      jedec: {\n        bits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\n        bytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n      }\n    },\n    fullform: {\n      iec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n      jedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n    }\n  };\n\n  /**\n   * filesize\n   *\n   * @method filesize\n   * @param  {Mixed}   arg        String, Int or Float to transform\n   * @param  {Object}  descriptor [Optional] Flags\n   * @return {String}             Readable file size String\n   */\n\n  function filesize(arg) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$bits = _ref.bits,\n        bits = _ref$bits === void 0 ? false : _ref$bits,\n        _ref$pad = _ref.pad,\n        pad = _ref$pad === void 0 ? false : _ref$pad,\n        _ref$base = _ref.base,\n        base = _ref$base === void 0 ? -1 : _ref$base,\n        _ref$round = _ref.round,\n        round = _ref$round === void 0 ? 2 : _ref$round,\n        _ref$locale = _ref.locale,\n        locale = _ref$locale === void 0 ? EMPTY : _ref$locale,\n        _ref$localeOptions = _ref.localeOptions,\n        localeOptions = _ref$localeOptions === void 0 ? {} : _ref$localeOptions,\n        _ref$separator = _ref.separator,\n        separator = _ref$separator === void 0 ? EMPTY : _ref$separator,\n        _ref$spacer = _ref.spacer,\n        spacer = _ref$spacer === void 0 ? SPACE : _ref$spacer,\n        _ref$symbols = _ref.symbols,\n        symbols = _ref$symbols === void 0 ? {} : _ref$symbols,\n        _ref$standard = _ref.standard,\n        standard = _ref$standard === void 0 ? EMPTY : _ref$standard,\n        _ref$output = _ref.output,\n        output = _ref$output === void 0 ? STRING : _ref$output,\n        _ref$fullform = _ref.fullform,\n        fullform = _ref$fullform === void 0 ? false : _ref$fullform,\n        _ref$fullforms = _ref.fullforms,\n        fullforms = _ref$fullforms === void 0 ? [] : _ref$fullforms,\n        _ref$exponent = _ref.exponent,\n        exponent = _ref$exponent === void 0 ? -1 : _ref$exponent,\n        _ref$roundingMethod = _ref.roundingMethod,\n        roundingMethod = _ref$roundingMethod === void 0 ? ROUND : _ref$roundingMethod,\n        _ref$precision = _ref.precision,\n        precision = _ref$precision === void 0 ? 0 : _ref$precision;\n\n    var e = exponent,\n        num = Number(arg),\n        result = [],\n        val = 0,\n        u = EMPTY; // Sync base & standard\n\n    if (base === -1 && standard.length === 0) {\n      base = 10;\n      standard = JEDEC;\n    } else if (base === -1 && standard.length > 0) {\n      standard = standard === IEC ? IEC : JEDEC;\n      base = standard === IEC ? 2 : 10;\n    } else {\n      base = base === 2 ? 2 : 10;\n      standard = base === 10 ? JEDEC : standard === JEDEC ? JEDEC : IEC;\n    }\n\n    var ceil = base === 10 ? 1000 : 1024,\n        full = fullform === true,\n        neg = num < 0,\n        roundingFunc = Math[roundingMethod];\n\n    if (isNaN(arg)) {\n      throw new TypeError(INVALID_NUMBER);\n    }\n\n    if (_typeof(roundingFunc) !== FUNCTION) {\n      throw new TypeError(INVALID_ROUND);\n    } // Flipping a negative number to determine the size\n\n\n    if (neg) {\n      num = -num;\n    } // Determining the exponent\n\n\n    if (e === -1 || isNaN(e)) {\n      e = Math.floor(Math.log(num) / Math.log(ceil));\n\n      if (e < 0) {\n        e = 0;\n      }\n    } // Exceeding supported length, time to reduce & multiply\n\n\n    if (e > 8) {\n      if (precision > 0) {\n        precision += 8 - e;\n      }\n\n      e = 8;\n    }\n\n    if (output === EXPONENT) {\n      return e;\n    } // Zero is now a special case because bytes divide by 1\n\n\n    if (num === 0) {\n      result[0] = 0;\n      u = result[1] = strings.symbol[standard][bits ? BITS : BYTES][e];\n    } else {\n      val = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\n\n      if (bits) {\n        val = val * 8;\n\n        if (val >= ceil && e < 8) {\n          val = val / ceil;\n          e++;\n        }\n      }\n\n      var p = Math.pow(10, e > 0 ? round : 0);\n      result[0] = roundingFunc(val * p) / p;\n\n      if (result[0] === ceil && e < 8 && exponent === -1) {\n        result[0] = 1;\n        e++;\n      }\n\n      u = result[1] = base === 10 && e === 1 ? bits ? SI_KBIT : SI_KBYTE : strings.symbol[standard][bits ? BITS : BYTES][e];\n    } // Decorating a 'diff'\n\n\n    if (neg) {\n      result[0] = -result[0];\n    } // Setting optional precision\n\n\n    if (precision > 0) {\n      result[0] = result[0].toPrecision(precision);\n    } // Applying custom symbol\n\n\n    result[1] = symbols[result[1]] || result[1];\n\n    if (locale === true) {\n      result[0] = result[0].toLocaleString();\n    } else if (locale.length > 0) {\n      result[0] = result[0].toLocaleString(locale, localeOptions);\n    } else if (separator.length > 0) {\n      result[0] = result[0].toString().replace(PERIOD, separator);\n    }\n\n    if (pad && Number.isInteger(result[0]) === false && round > 0) {\n      var x = separator || PERIOD,\n          tmp = result[0].toString().split(x),\n          s = tmp[1] || EMPTY,\n          l = s.length,\n          n = round - l;\n      result[0] = \"\".concat(tmp[0]).concat(x).concat(s.padEnd(l + n, ZERO));\n    }\n\n    if (full) {\n      result[1] = fullforms[e] ? fullforms[e] : strings.fullform[standard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);\n    } // Returning Array, Object, or String (default)\n\n\n    return output === ARRAY ? result : output === OBJECT ? {\n      value: result[0],\n      symbol: result[1],\n      exponent: e,\n      unit: u\n    } : result.join(spacer);\n  } // Partial application for functional programming\n\n\n  filesize.partial = function (opt) {\n    return function (arg) {\n      return filesize(arg, opt);\n    };\n  };\n\n  return filesize;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/filesize/lib/filesize.js\n");

/***/ })

};
;